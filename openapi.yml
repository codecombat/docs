openapi: 3.0.1
info:
  title: CodeCombat API
  version: ""
paths:
  /auth/login-o-auth:
    get:
      description: >
        Logs a [user](#users) in. #### Example ```javascript url =
        `https://codecombat.com/auth/login-o-auth?provider=${OAUTH_PROVIDER_ID}&accessToken=1234`
        res.redirect(url) // User is sent to this CodeCombat URL and assuming
        everything checks out,  // is logged in and redirected to the home page.
        ``` In this example, we call your lookup URL (let's say,
        `https://oauth.provider/user?t=<%= accessToken %>`) with the access
        token (`1234`). The lookup URL returns `{ id: 'abcd' }` in this case. We
        will match this `id` with the OAuthIdentity stored in the user
        information in our db. If everything checks out, the user is logged in
        and redirected to the home page.
      operationId: authService.get
      tags:
        - Auth
      parameters:
        - name: provider
          in: query
          description: Your OAuth Provider ID
          required: true
          schema:
            type: string
        - name: accessToken
          in: query
          description: >-
            Will be passed through your lookup URL to get the user ID. Required
            if no `code`.
          required: false
          schema:
            type: string
        - name: code
          in: query
          description: >-
            Will be passed to the OAuth token endpoint to get a token. Required
            if no `accessToken`.
          required: false
          schema:
            type: string
        - name: redirect
          in: query
          description: >-
            Override where the user will navigate to after successfully logging
            in.
          required: false
          schema:
            type: string
        - name: errorRedirect
          in: query
          description: >-
            If an error happens, redirects the user to this url, with at least
            query parameters `code`, `errorName` and `message`.
          required: false
          schema:
            type: string
      responses:
        "204":
          description: ""
      summary: Login User
      security: &ref_0
        - BasicAuth: []
  /clan/{handle}/members:
    put:
      description: Upserts a user into the clan.
      operationId: clansService.upsertClan
      tags:
        - Clans
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClanResponse"
      summary: Upsert User Into Clan
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The `_id` or `slug` of the user to add to the clan.
              required:
                - userId
  /classrooms:
    get:
      description: Returns the classroom details for a class code.
      operationId: classroomsService.get
      tags:
        - Classrooms
      parameters:
        - name: code
          in: query
          description: The classroom's `code`.
          required: true
          schema:
            type: string
        - name: retMemberLimit
          in: query
          description: limit the return number of members for the classroom
          required: false
          schema:
            type: number
            format: double
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassroomResponseWithCode"
      summary: Get Classroom Details
      security: *ref_0
    post:
      description: Creates a new empty `Classroom`.
      operationId: classroomsService.create
      tags:
        - Classrooms
      parameters: []
      responses:
        "204":
          description: ""
      summary: Create a Classroom
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the classroom
                ownerID:
                  $ref: "#/components/schemas/objectIdString"
                aceConfig:
                  $ref: "#/components/schemas/AceConfig"
              required:
                - name
                - ownerID
                - aceConfig
  /classrooms/{handle}/members:
    put:
      description: Upserts a user into the classroom.
      operationId: classroomsService.upsertFromClassroom
      tags:
        - Classrooms
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassroomResponse"
      summary: Upsert a User from Classroom
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The code for joining this classroom
                userId:
                  type: string
                  description: The `_id` or `slug` of the user to add to the class.
                retMemberLimit:
                  type: number
                  format: double
                  description: >-
                    limit the return number of members for the classroom, the
                    default value is 1000
              required:
                - code
                - userId
    delete:
      description: Remove a user from the classroom.
      operationId: classroomsService.deleteUserFromClassroom
      tags:
        - Classrooms
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassroomResponse"
      summary: Delete User from Classroom
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The `_id` or `slug` of the user to remove from the class.
                retMemberLimit:
                  type: number
                  format: double
                  description: >-
                    limit the return number of members for the classroom, the
                    default value is 1000
              required:
                - userId
  /classrooms/{classroomHandle}/courses/{courseHandle}/enrolled:
    put:
      description: |
        Enrolls a user in a course in a classroom.
        If the course is paid, user must have an active license.
        User must be a member of the classroom.
      operationId: classroomsService.enrollUserInCourse
      tags:
        - Classrooms
      parameters:
        - name: classroomHandle
          in: path
          description: The classroom's `_id`.
          required: true
          schema:
            type: string
        - name: courseHandle
          in: path
          description: The course's `_id`.
          required: true
          schema:
            type: string
        - name: retMemberLimit
          in: query
          description: >-
            limit the return number of members for the classroom, the default
            value is 1000
          required: false
          schema:
            type: number
            format: double
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassroomResponse"
      summary: Enroll a User in a Course
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/objectIdString"
              required:
                - userId
  /classrooms/{classroomHandle}/courses/{courseHandle}/remove-enrolled:
    put:
      description: |
        Removes an enrolled user from a course in a classroom.
      operationId: classroomsService.removeUserFromClassroom
      tags:
        - Classrooms
      parameters:
        - name: classroomHandle
          in: path
          description: The classroom's `_id`.
          required: true
          schema:
            type: string
        - name: courseHandle
          in: path
          description: The course's `_id`.
          required: true
          schema:
            type: string
        - name: retMemberLimit
          in: query
          description: >-
            limit the return number of members for the classroom, the default
            value is 1000
          required: false
          schema:
            type: number
            format: double
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassroomResponse"
      summary: Remove a User from a Classroom
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/objectIdString"
              required:
                - userId
  /classrooms/{classroomHandle}/stats:
    get:
      description: |
        Returns a list of all members stats for the classroom.
      operationId: classroomsService.getMembersStats
      tags:
        - Classrooms
      parameters:
        - name: classroomHandle
          in: path
          description: The classroom's `_id`.
          required: true
          schema:
            type: string
        - name: project
          in: query
          description: >
            If specified, include only the specified projection of returned
            stats; else, return all stats. Format as a comma-separated list,
            like `creator,playtime,state.complete`.
          required: false
          schema:
            type: string
        - name: memberLimit
          in: query
          description: >-
            Limit the return member number. the default value is 10, and the max
            value is 100
          required: false
          schema:
            type: number
            format: double
        - name: memberSkip
          in: query
          description: |
            Skip the members that doesn't need to return, for pagination
          required: false
          schema:
            type: number
            format: double
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MemberStat"
      summary: Get Members Stats for a Classroom
      security: *ref_0
  /classrooms/{classroomHandle}/members/{memberHandle}/sessions:
    get:
      description: |
        Returns a list of all levels played by the user for the classroom.
      operationId: classroomsService.getLevelSession
      tags:
        - Classrooms
      parameters:
        - name: classroomHandle
          in: path
          description: The classroom's `_id`.
          required: true
          schema:
            type: string
        - name: memberHandle
          in: path
          description: The classroom member's `_id`.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LevelSessionResponse"
      summary: Get Level Session
      security: *ref_0
  /playtime-stats:
    get:
      description: Returns the playtime stats
      operationId: statsService.getPlaytimeStats
      tags:
        - Stats
      parameters:
        - name: startDate
          in: query
          description: Earliest an included user was created
          required: false
          schema:
            type: string
        - name: endDate
          in: query
          description: Latest an included user was created
          required: false
          schema:
            type: string
        - name: country
          in: query
          description: Filter by country string
          required: false
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaytimeStatsResponse"
      summary: Get Playtime Stats
      security: *ref_0
  /license-stats:
    get:
      description: Returns the license stats
      operationId: statsService.getLicenseStats
      tags:
        - Stats
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LicenseStatsResponse"
      summary: Get License Stats
      security: *ref_0
  /users:
    post:
      description: |
        Creates a `User`.
        #### Example
        ```javascript
        url = 'https://codecombat.com/api/users'
        json = { email: 'an@email.com', name: 'Some Username', role: 'student' }
        request.post({ url, json, auth })
        ```
      operationId: usersService.create
      tags:
        - Users
      parameters: []
      responses:
        "204":
          description: ""
      summary: Create User
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                role:
                  $ref: "#/components/schemas/UserRole"
                  description: >-
                    A `"student"` or `"teacher"`. If unset, a home user will be
                    created, unable to join classrooms.
                preferredLanguage:
                  type: string
                heroConfig:
                  $ref: "#/components/schemas/HeroConfig"
                birthday:
                  type: string
              required:
                - name
                - email
  /users/{handle}:
    get:
      description: Returns a `User`.
      operationId: usersService.get
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
        - name: includePlayTime
          in: query
          description: Set to non-empty string to include stats.playTime in response
          required: false
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
      summary: Get User
      security: *ref_0
    put:
      description: Modify name of a `User`
      operationId: usersService.update
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
      summary: Update User
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Set to new name string
                birthday:
                  type: string
                  description: Set the birthday
              required:
                - name
  /users/{handle}/classrooms:
    get:
      description: >-
        Returns a list of `Classrooms` this user is in (if a student) or owns
        (if a teacher).
      operationId: usersService.getClassrooms
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
        - name: retMemberLimit
          in: query
          description: limit the return number of members for each classroom
          required: false
          schema:
            type: number
            format: double
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ClassroomResponseWithCode"
      summary: Get Classrooms By User
      security: *ref_0
  /users/{handle}/hero-config:
    put:
      description: Set the user's hero.
      operationId: usersService.getHero
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
      summary: Get User Hero
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                thangType:
                  $ref: "#/components/schemas/objectIdString"
  /users/{handle}/ace-config:
    put:
      description: >-
        Set the user's aceConfig (the settings for the in-game Ace code editor),
        such as whether to enable autocomplete.
      operationId: usersService.setAceConfig
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                liveCompletion:
                  type: boolean
                  description: >-
                    controls whether autocompletion snippets show up, the
                    default value is true
                behaviors:
                  type: boolean
                  description: >-
                    controls whether things like automatic parenthesis and quote
                    completion happens, the default value is false
                language:
                  type: string
                  description: >-
                    only for home users, should be one of ["python",
                    "javascript", "cpp", "lua", "coffeescript"] right now
  /users/{handle}/o-auth-identities:
    post:
      description: >
        Adds an OAuth2 identity to the user, so that they can be logged in with
        that identity. You need to send the OAuth code or the access token to
        this endpoint. 1. If no access token is provided, it will use your
        OAuth2 token URL to exchange the given code for an access token. 1. Then
        it will use the access token (given by you, or received from step 1) to
        look up the user on your service using the lookup URL, and expects a
        JSON object in response with an `id` property. 1. It will then save that
        user `id` to the user in our db as a new OAuthIdentity. #### Example
        ```javascript url =
        `https://codecombat.com/api/users/${userID}/o-auth-identities`
        OAUTH_PROVIDER_ID = 'xyz' json = { provider: OAUTH_PROVIDER_ID,
        accessToken: '1234' } request.post({ url, json, auth}, (err, res) => {
          console.log(res.body.oAuthIdentities) // [ { provider: 'xyx', id: 'abcd' } ]
        }) ``` In this example, we call your lookup URL (let's say,
        `https://oauth.provider/user?t=<%= accessToken %>`) with the access
        token (`1234`). The lookup URL returns `{ id: 'abcd' }` in this case,
        which we save to the user in our db.
      operationId: usersService.addOAuthIdentity
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
      summary: Add OAuth2 Identity
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                provider:
                  type: string
                  description: Your OAuth Provider ID.
                accessToken:
                  type: string
                  description: >-
                    Will be passed through your lookup URL to get the user ID.
                    Required if no `code`.
                code:
                  type: string
                  description: >-
                    Will be passed to the OAuth token endpoint to get a token.
                    Required if no `accessToken`.
              required:
                - provider
  /users/{handle}/subscription:
    put:
      description: |
        Grants a user premium access to the "Home" version up to a certain time.
        #### Example
        ```javascript
        url = `https://codecombat.com/api/users/${userID}/subscription`
        json = { ends: new Date('2017-01-01').toISOString() }
        request.put({ url, json, auth }, (err, res) => {
          console.log(res.body.subscription) // { ends: '2017-01-01T00:00:00.000Z', active: true }
        })
        ```
      operationId: usersService.updateSubscription
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ends:
                  type: string
                  format: date-time
              required:
                - ends
  /users/{handle}/shorten-subscription:
    put:
      description: >
        If the user already has a premium access up to a certain time, this
        shortens/revokes his/her premium access. If the ends is less than or
        equal to the current time, it revokes the subscription and sets the end
        date to be the current time, else it just shortens the subscription.
        #### Example ```javascript url =
        `https://codecombat.com/api/users/${userID}/shorten-subscription` json =
        { ends: new Date().toISOString() } request.put({ url, json, auth },
        (err, res) => {
          console.log(res.body.subscription.active) // false
        }) ```
      operationId: usersService.shortenSubscription
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
      summary: Shorten User Subscription
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ends:
                  type: string
                  format: date-time
              required:
                - ends
  /users/{handle}/license:
    put:
      description: |
        Grants a user access to the "Classroom" version up to a certain time.
        Sets their role to "student".
        #### Example
        ```javascript
        url = `https://codecombat.com/api/users/${userID}/license`
        json = { ends: new Date('2017-01-01').toISOString() }
        request.put({ url, json, auth }, (err, res) => {
          console.log(res.body.license) // { ends: '2017-01-01T00:00:00.000Z', active: true }
        })
        ```
      operationId: usersService.grantLicense
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
      summary: Grant User License
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ends:
                  type: string
                  format: date-time
              required:
                - ends
  /users/{handle}/shorten-license:
    put:
      description: >
        If the user already has access to the "Classroom" version up to a
        certain time, this shortens/revokes his/her access. If the ends is less
        than or equal to the current time, it revokes the enrollment and sets
        the end date to be the current time, else it just shortens the
        enrollment. #### Example ```javascript url =
        `https://codecombat.com/api/users/${userID}/shorten-license` json = {
        ends: new Date().toISOString() } request.put({ url, json, auth }, (err,
        res) => {
          console.log(res.body.license.active) // false
        }) ```
      operationId: usersService.shortenLicense
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
      summary: Shorten User License
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ends:
                  type: string
                  format: date-time
              required:
                - ends
  /user-lookup/{property}/{value}:
    get:
      description: Redirects to `/users/{handle}` given a unique, identifying property
      operationId: usersService.findUser
      tags:
        - Users
      parameters:
        - name: property
          in: path
          description: The property to lookup by. May either be `"israel-id"` or `"name"`.
          required: true
          schema:
            type: string
        - name: value
          in: path
          description: The value to be looked up.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: ""
      summary: Search for User
      security: *ref_0
components:
  schemas:
    ClanResponse:
      type: object
      description: Subset of properties listed here
      properties:
        _id:
          $ref: "#/components/schemas/objectIdString"
        name:
          type: string
        displayName:
          type: string
        members:
          type: array
          items:
            $ref: "#/components/schemas/objectIdString"
        ownerID:
          $ref: "#/components/schemas/objectIdString"
        description:
          type: string
        type:
          type: string
        kind:
          type: string
        metadata:
          type: object
          additionalProperties: {}
    LevelSessionResponse:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/State"
        level:
          $ref: "#/components/schemas/Level"
        levelID:
          type: string
          description: Level slug like `wakka-maul`
        creator:
          $ref: "#/components/schemas/objectIdString"
        playtime:
          type: integer
          description: Time played in seconds.
        changed:
          $ref: "#/components/schemas/datetimeString"
        created:
          $ref: "#/components/schemas/datetimeString"
        dateFirstCompleted:
          $ref: "#/components/schemas/datetimeString"
        submitted:
          type: boolean
          description: For arenas. Whether or not the level has been added to the ladder.
        published:
          type: boolean
          description: >-
            For shareable projects. Whether or not the project has been shared
            with classmates.
    State:
      type: object
      properties:
        complete:
          type: boolean
    Level:
      type: object
      properties:
        original:
          type: string
          description: The id for the level.
    AceConfig:
      type: object
      properties:
        language:
          type: string
          description: Programming language for the classroom
    PlayStats:
      type: object
      properties:
        gamesCompleted:
          type: number
          format: double
        playtime:
          type: number
          format: double
          description: Total play time in seconds
    MemberStat:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/objectIdString"
        stats:
          $ref: "#/components/schemas/PlayStats"
    UserResponse:
      type: object
      description: Subset of properties listed here
      properties:
        _id:
          $ref: "#/components/schemas/objectIdString"
        email:
          type: string
        name:
          type: string
        slug:
          type: string
        role:
          $ref: "#/components/schemas/roleString"
        stats:
          $ref: "#/components/schemas/UserStats"
        oAuthIdentities:
          type: array
          items:
            $ref: "#/components/schemas/AuthIdentity"
        subscription:
          $ref: "#/components/schemas/Subscription"
        license:
          $ref: "#/components/schemas/License"
    UserStats:
      type: object
      properties:
        gamesCompleted:
          type: number
          format: double
        concepts:
          type: object
          additionalProperties:
            type: number
            format: double
        playTime:
          type: number
          format: double
          description: Included only when specifically requested on the endpoint
    AuthIdentity:
      type: object
      properties:
        provider:
          type: string
        id:
          type: string
    Subscription:
      type: object
      properties:
        ends:
          $ref: "#/components/schemas/datetimeString"
        active:
          type: boolean
    License:
      type: object
      properties:
        ends:
          $ref: "#/components/schemas/datetimeString"
        active:
          type: boolean
    objectIdString:
      type: string
    roleString:
      type: string
      description: Usually either 'teacher' or 'student'
    datetimeString:
      type: string
    ClassroomResponseWithCode:
      type: object
      description: Subset of properties listed here
      properties:
        _id:
          $ref: "#/components/schemas/objectIdString"
        name:
          type: string
        members:
          type: array
          items:
            $ref: "#/components/schemas/objectIdString"
        ownerID:
          $ref: "#/components/schemas/objectIdString"
        description:
          type: string
        code:
          type: string
        codeCamel:
          type: string
        courses:
          type: array
          items:
            $ref: "#/components/schemas/Course"
        clanId:
          $ref: "#/components/schemas/objectIdString"
    Course:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/objectIdString"
        levels:
          type: array
          items:
            type: object
            additionalProperties: {}
        enrolled:
          type: array
          items:
            $ref: "#/components/schemas/objectIdString"
        instance_id:
          $ref: "#/components/schemas/objectIdString"
    ClassroomResponse:
      type: object
      description: Subset of properties listed here
      properties:
        _id:
          $ref: "#/components/schemas/objectIdString"
        name:
          type: string
        members:
          type: array
          items:
            $ref: "#/components/schemas/objectIdString"
        ownerID:
          $ref: "#/components/schemas/objectIdString"
        description:
          type: string
        courses:
          type: array
          items:
            $ref: "#/components/schemas/Course"
    PlaytimeStatsResponse:
      type: object
      properties:
        playTime:
          type: number
          format: double
          description: Total play time in seconds
        gamesPlayed:
          type: number
          format: double
          description: Number of levels played
    LicenseStatsResponse:
      type: object
      properties:
        licenseDaysGranted:
          type: number
          format: double
          description: Total number of license days granted
        licenseDaysUsed:
          type: number
          format: double
          description: Number of license days used
        licenseDaysRemaining:
          type: number
          format: double
          description: Number of license days remaining
        activeLicenses:
          type: number
          format: double
          description: Number of active/valid licenses
    UserRole:
      type: string
      enum:
        - student
        - teacher
      description: >-
        A `"student"` or `"teacher"`. If unset, a home user will be created,
        unable to join classrooms.
    HeroConfig:
      type: object
      properties:
        thangType:
          $ref: "#/components/schemas/objectIdString"
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
servers:
  - url: https://codecombat.com/api
    description: Production
